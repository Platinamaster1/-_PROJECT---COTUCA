import { print as printWindow, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';
import { getElement } from '../utils/helper';
import { beforePrint } from '../model/constants';
import { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';
/**
 * Annotation Module handles the Annotation for Maps
 */
var ExportUtils = /** @class */ (function () {
    /**
     * Constructor for Maps
     * @param control
     */
    function ExportUtils(control) {
        this.control = control;
    }
    /**
     * To print the Maps
     * @param elements
     */
    ExportUtils.prototype.print = function (elements) {
        var _this = this;
        this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');
        this.printWindow.moveTo(0, 0);
        this.printWindow.resizeTo(screen.availWidth, screen.availHeight);
        var argsData = {
            cancel: false, htmlContent: this.getHTMLContent(elements), name: beforePrint
        };
        this.control.trigger('beforePrint', argsData, function (beforePrintArgs) {
            if (!argsData.cancel) {
                printWindow(argsData.htmlContent, _this.printWindow);
            }
        });
    };
    /**
     * To get the html string of the Maps
     * @param elements
     * @private
     */
    ExportUtils.prototype.getHTMLContent = function (elements) {
        var div = createElement('div');
        if (elements) {
            if (elements instanceof Array) {
                Array.prototype.forEach.call(elements, function (value) {
                    div.appendChild(getElement(value).cloneNode(true));
                });
            }
            else if (elements instanceof Element) {
                div.appendChild(elements.cloneNode(true));
            }
            else {
                div.appendChild(getElement(elements).cloneNode(true));
            }
        }
        else {
            div.appendChild(this.control.element.cloneNode(true));
        }
        return div;
    };
    /**
     * To export the file as image/svg format
     * @param type
     * @param fileName
     */
    ExportUtils.prototype.export = function (type, fileName, exportDownload, orientation) {
        var _this = this;
        // tslint:disable-next-line:max-func-body-length
        var promise = new Promise(function (resolve, reject) {
            var canvasElement = createElement('canvas', {
                id: 'ej2-canvas',
                attrs: {
                    'width': _this.control.availableSize.width.toString(),
                    'height': _this.control.availableSize.height.toString()
                }
            });
            var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);
            orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;
            var toolbarEle = document.getElementById(_this.control.element.id + '_ToolBar');
            var svgParent = document.getElementById(_this.control.element.id + '_Tile_SVG_Parent');
            var svgData;
            if (!_this.control.isTileMap) {
                svgData = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' +
                    _this.control.svgObject.outerHTML + '</svg>';
            }
            else {
                var tileSvg = document.getElementById(_this.control.element.id + '_Tile_SVG');
                svgData = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' +
                    _this.control.svgObject.outerHTML + tileSvg.outerHTML + '</svg>';
            }
            var url = window.URL.createObjectURL(new Blob(type === 'SVG' ? [svgData] :
                [(new XMLSerializer()).serializeToString(_this.control.svgObject)], { type: 'image/svg+xml' }));
            if (type === 'SVG') {
                if (exportDownload) {
                    _this.triggerDownload(fileName, type, url, isDownload);
                }
                else {
                    resolve(null);
                }
            }
            else {
                var pdfDocument_1 = new PdfDocument();
                var image_1 = new Image();
                var ctx_1 = canvasElement.getContext('2d');
                if (!_this.control.isTileMap) {
                    image_1.onload = (function () {
                        ctx_1.drawImage(image_1, 0, 0);
                        window.URL.revokeObjectURL(url);
                        if (type === 'PDF') {
                            var imageString = canvasElement.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');
                            pdfDocument_1.pageSettings.orientation = orientation;
                            imageString = imageString.slice(imageString.indexOf(',') + 1);
                            pdfDocument_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, (_this.control.availableSize.width - 60), _this.control.availableSize.height);
                            if (exportDownload) {
                                pdfDocument_1.save(fileName + '.pdf');
                                pdfDocument_1.destroy();
                            }
                            else {
                                resolve(null);
                            }
                        }
                        else {
                            if (exportDownload) {
                                _this.triggerDownload(fileName, type, canvasElement.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);
                            }
                            else {
                                resolve(canvasElement.toDataURL('image/png'));
                            }
                        }
                    });
                    image_1.src = url;
                }
                else {
                    var xHttp = new XMLHttpRequest();
                    var tileLength_1 = _this.control.mapLayerPanel.tiles.length;
                    var _loop_1 = function (i) {
                        var tile = document.getElementById('tile_' + (i - 1));
                        var tileImg = new Image();
                        tileImg.crossOrigin = 'Anonymous';
                        ctx_1.fillStyle = _this.control.background ? _this.control.background : '#FFFFFF';
                        ctx_1.fillRect(0, 0, _this.control.availableSize.width, _this.control.availableSize.height);
                        ctx_1.font = _this.control.titleSettings.textStyle.size + ' Arial';
                        ctx_1.fillStyle = document.getElementById(_this.control.element.id + '_Map_title').getAttribute('fill');
                        ctx_1.fillText(_this.control.titleSettings.text, parseFloat(document.getElementById(_this.control.element.id + '_Map_title').getAttribute('x')), parseFloat(document.getElementById(_this.control.element.id + '_Map_title').getAttribute('y')));
                        tileImg.onload = (function () {
                            if (i === 0 || i === tileLength_1 + 1) {
                                if (i === 0) {
                                    ctx_1.setTransform(1, 0, 0, 1, 0, 0);
                                    ctx_1.rect(0, parseFloat(svgParent.style.top), parseFloat(svgParent.style.width), parseFloat(svgParent.style.height));
                                    ctx_1.clip();
                                }
                                else {
                                    ctx_1.setTransform(1, 0, 0, 1, parseFloat(svgParent.style.left), parseFloat(svgParent.style.top));
                                }
                            }
                            else {
                                ctx_1.setTransform(1, 0, 0, 1, parseFloat(tile.style.left) + 10, parseFloat(tile.style.top) +
                                    (parseFloat(document.getElementById(_this.control.element.id + '_tile_parent').style.top)));
                            }
                            ctx_1.drawImage(tileImg, 0, 0);
                            if (i === tileLength_1 + 1) {
                                if (type === 'PDF') {
                                    localStorage.setItem('saved-image-example', canvasElement.toDataURL('image/jpeg'));
                                    var x = localStorage.getItem('saved-image-example');
                                    pdfDocument_1.pageSettings.orientation = orientation;
                                    x = x.slice(x.indexOf(',') + 1);
                                    pdfDocument_1.pages.add().graphics.drawImage(new PdfBitmap(x), 0, 0, (_this.control.availableSize.width - 60), _this.control.availableSize.height);
                                    if (exportDownload) {
                                        pdfDocument_1.save(fileName + '.pdf');
                                        pdfDocument_1.destroy();
                                    }
                                    else {
                                        resolve(null);
                                    }
                                }
                                else {
                                    localStorage.setItem('local-canvasImage', canvasElement.toDataURL('image/png'));
                                    var localBase64 = localStorage.getItem('local-canvasImage');
                                    if (exportDownload) {
                                        _this.triggerDownload(fileName, type, localBase64, isDownload);
                                        localStorage.removeItem('local-canvasImage');
                                    }
                                    else {
                                        resolve(localBase64);
                                    }
                                }
                            }
                        });
                        if (i === 0 || i === tileLength_1 + 1) {
                            if (i === 0) {
                                tileImg.src = url;
                            }
                            else {
                                setTimeout(function () {
                                    tileImg.src = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(document.getElementById(_this.control.element.id + '_Tile_SVG'))], { type: 'image/svg+xml' }));
                                    // tslint:disable-next-line:align
                                }, 300);
                            }
                        }
                        else {
                            xHttp.open('GET', tile.children[0].getAttribute('src'), true);
                            xHttp.send();
                            tileImg.src = tile.children[0].getAttribute('src');
                        }
                    };
                    for (var i = 0; i <= tileLength_1 + 1; i++) {
                        _loop_1(i);
                    }
                }
            }
        });
        return promise;
    };
    /**
     * To trigger the download element
     * @param fileName
     * @param type
     * @param url
     */
    ExportUtils.prototype.triggerDownload = function (fileName, type, url, isDownload) {
        createElement('a', {
            attrs: {
                'download': fileName + '.' + type.toLocaleLowerCase(),
                'href': url
            }
        }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {
            view: window,
            bubbles: false,
            cancelable: true
        }));
    };
    return ExportUtils;
}());
export { ExportUtils };
